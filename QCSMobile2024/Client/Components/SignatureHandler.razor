@* @using System.Runtime.CompilerServices
@using QCSMobile2024.Shared.Models.ViewModels
@using QCSMobile2024.Shared.Services
@using Blazorise.SignaturePad

@inject IJSRuntime JS;
@inject FileService FileService;

<Row Style="margin: 0px">
    <Column ColumnSize="ColumnSize.Is12.OnMobile.Is12.OnTablet.Is12.OnDesktop.Is12.OnWidescreen.Is8.OnFullHD.Is2.WithOffset.OnFullHD">
        <Card>
            <CardHeader TextAlignment="Blazorise.TextAlignment.Center" Class="fancy-text">
                Signature
            </CardHeader>
            <CardBody Class="custom-signature-container" ElementId="Signature">
                @if (Signature.Path == null && !IsSignatureAccepted)
                {
                    <SignaturePad @bind-Value="@Signature.Stream"
                                    PenColor="#152235" 
                                    Throttle="10"
                                    CanvasHeight="250"
                                    Class="custom-signature" />
                }
            </CardBody>
        </Card>
    </Column>
</Row>
<Row Class="custom-row-no-margin">
    @if(Signature.Path == null)
    {
        @if(!IsSignatureAccepted)
        {
            <Column ColumnSize="ColumnSize.Is8.OnMobile.Is8.OnTablet.Is8.OnDesktop.Is8.OnWidescreen.Is6.OnFullHD.Is2.WithOffset.OnFullHD">
                <Button Clicked="AcceptSignature" Class="bottom-button fancy-text btn-outline-primary">
                    Accept Signature
                </Button>
            </Column>
            <Column ColumnSize="ColumnSize.Is4.OnMobile.Is4.OnTablet.Is4.OnDesktop.Is4.OnWidescreen.Is2.OnFullHD">
                <Button Clicked="ClearSignature" Class="bottom-button fancy-text btn-outline-danger">
                    Clear
                </Button>
            </Column>
        }
        else
        {
            <Column ColumnSize="ColumnSize.Is12.OnMobile.Is12.OnTablet.Is12.OnDesktop.Is12.OnWidescreen.Is8.OnFullHD.Is2.WithOffset.OnFullHD">
                <Button Clicked="ClearSignature" Class="bottom-button fancy-text btn-outline-danger">
                    Clear
                </Button>
            </Column>
        }
    }
</Row>

<style>
    .custom-signature-container {
        width: 100%;
        height: 250px;
        padding: 0px;
        border-style: solid;
        border-color: gray;
        border-width: 1px;
        background-size: contain;
        background-position: center;
        background-repeat: no-repeat;
        position: relative;
        border-radius: 5px;
    }

    .custom-signature {
        width: 100%;
        border-color: gray;
        border-width: 1px;
    }
</style>

@code {
    [Parameter]
    public FileAttachmentViewModel Signature { get; set; }

    public bool IsSignatureAccepted = false;

    static string MethodName([CallerMemberName] string name = null) => name;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // If existing, populate images.
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(Signature.Path))
            {
                IsSignatureAccepted = true;

                try
                {
                    //Get the original image stream from the server.
                    Stream fullStream = await FileService.DownloadFile(Signature, "Fnol_Vehicle");
                    var streamRef = new DotNetStreamReference(fullStream);
                    await JS.InvokeVoidAsync("setImage", Signature.Title, streamRef);

                    Signature.Stream = ((MemoryStream)fullStream).ToArray();
                    Signature.ContentType = "image/png";
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }
    }

    public async Task AcceptSignature()
    {
        if(Signature.Stream == null)
        {
            return;
        }

        IsSignatureAccepted = true;

        // Create a MemoryStream from the byte array
        using (MemoryStream stream = new MemoryStream(Signature.Stream))
        {
            // Create a StreamReference from the MemoryStream
            var streamRef = new DotNetStreamReference(stream);
            await JS.InvokeVoidAsync("setImage", Signature.Title, streamRef);

            Signature.Stream = ((MemoryStream)stream).ToArray();
            Signature.ContentType = "image/png";
        }
    }

    public async Task ClearSignature()
    {
        IsSignatureAccepted = false;

        Signature.Stream = null;

        await JS.InvokeVoidAsync("resetSignature");
    }
}
 *@